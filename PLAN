================
Datatracker PLAN
================

Updated: $Date$

Planned work in rough order
===========================

* Merge in manual post work from Spherical Cow

* Glue code for WG issue trackers and wiki:
  - create new trackers on group creation
  - update access lists on group chair/secretary changes
  - update components on new group documents

* Review tracking project merge

* Enhancements for meeting materials and proceedings.

* Schema Changes: tags, external links for groups.

* Add "Waiting for implementation" and "Held by WG" states, with comment field

* Upgrade to Django 1.8 / 1.9 / 1.10

* Revisit Yang module checks:  Capture output also for passed tests.
  Add second checker.  Fix extraction problems.

* Revisit photo uploads: Add photo upload for people with roles.  Add
  photos to wg pages and group overview pages.

* Revisit floorplans: Add room coordinate input tool (javascript).
  Add NOC object annotation possibilities.

* Refactor to one function instead of having both Document.get_absolute_url()
  and Document.href(), which should do the same thing, but don't today.  Also
  change the default draft href to be the datatracker url now that we support
  revisions.

* Add support for internationalised email addresses according to RFC 6531
  when sending email (this is not supported by smtplib under Python 2.7,
  so will need support code in the application until we migrate to Python 3.5)

* Add support for IAB Programs

* Transition to PostgreSQL

* Break out the htmlization code used on tools in a library, and use that
  in the datatracker rendering, replacing the simpler code currently in use.

* Glue code to trigger generation of htmlized documents on www.ietf.org ??

* Review and change the draft submission and handling code to deal with UTF-8
  instead of ascii before upload of utf-8 drafts should be permitted.  In
  ietf.submit.views.upload_submission(), for instance, there's a file open()
  which should be codecs.open() with the appropriate encoding.  In general,
  there are about 100 file open() which should be reviewed and changed to
  codecs.open() unless that's clearly not right.

* Performance analysis of database table and index setup

* Code refactoring to avoid code changes for new WG document tags

* When draft XML source is available, take references from that instead
  of extracting them from the text version.

* Transition to running under Python 3.x (probably 3.5) instead of 2.7

* Small nomcom refactoring: associate Feedback records with Person
  instead of User.

* Consistency fix:  in settings.py, name directory settings consistently with
  ..._DIR; reserving ..._PATH for settings with PATH semantics (':'-separated lists
  of directories)

* For documents with Yang modules, add links to the extracted modules (possibly in
  multiple formats -- pyang can generate a large number of alternative formats)

* When we get to the point where we can produce pdf from xml+media, remove the
  pdf upload possibility -- it's a definite attack vector.  Possibly start scanning
  pdf files for /JS and /JavaScript (and workarounds to hide Javascript)

* Add one or more API description pages with examples of common queries

* Add role lists and additional relevant information to the personal profile
  pages

* Increase the requirements on valid email addresses in draft submissions --
  contacting authors is hard if they don't provide an email address.

* Make it possible to let time run backwards in the database (creation timestamps,
  universal changelog)

* Change slugs which were limited by the former 8-character slug length limit to
  be more readable (needs both code changes and migrations).

* Additional charts, various statistics views.

* For graphing and mapping various numbers relative to country population, 
  integrate population data from the world bank,
  http://databank.worldbank.org/data/reports.aspx?source=2&series=SP.POP.TOTL&country=
  (or some other source, if a better is found).  WorldOmeters has running counters,
  but ask for a lot of money for even one.

