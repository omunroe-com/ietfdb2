#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -*- Python -*-
#
# $Id: generate-draft-aliases $
#
# Author: Markus Stenberg <markus.stenberg@iki.fi>
#
"""

This code dumps Django model InternetDraft's contents as postfix email
aliases

<no suffix> (same as -authors)
.authors (list of authors)
.chairs (WG chairs)
.notify (notify emails(?))
.ad (sponsoring AD)
.all (all of the above)

TODO:

- results somewhat inconsistent with the results from the old tool;
  should examine why (ask me for diff tool if interested in fixing it)

"""

DRAFT_EMAIL_SUFFIX='@tools.ietf.org'

# boilerplate (from various other ietf/bin scripts)
import os, sys
basedir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
sys.path = [ basedir ] + sys.path

from ietf import settings
from django.core import management
management.setup_environ(settings)

from ietf.doc.models import Document
from ietf.group.utils import get_group_chairs_emails, get_group_ads_emails
from ietf.utils.aliases import *
import time

def get_draft_ad_emails(draft):
    " Get AD email for the given draft, if any. "
    # If working group document, return current WG ADs
    wg = draft.group
    if wg and wg.acronym != 'none' and wg.parent and wg.parent.acronym != 'none':
        return get_group_ads_emails(wg)
    # If not, return explicit AD set (whether up to date or not)
    ad = draft.ad
    #return [ad and ad.user and ad.user.email]
    return [ad and ad.email_address()]

def get_draft_authors_emails(draft):
    " Get list of authors for the given draft."

    # This feels 'correct'; however, it creates fairly large delta
    return [email.email_address() for email in draft.authors.all()]

    # This gives fairly small delta compared to current state,
    # however, it seems to be wrong (doesn't check for emails being
    # active etc).
    #return [email.address for email in draft.authors.all()]

def get_draft_notify_emails(draft):
    " Get list of email addresses to notify for the given draft."
    n = draft.notify
    if not n:
        return
    l = []
    draft_email = draft.name + DRAFT_EMAIL_SUFFIX
    for e in n.split(','):
        # If the draft name itself is listed as notify list element, we
        # expand it (to make results better verifiable with the old ones)
        e = e.strip()
        if e == draft_email:
            l.extend(get_draft_authors_emails(draft))
        else:
            l.append(e)
    # Alternative: if we don't want to do expansion, just this would be
    # perhaps better (MTA can do expansion too):
    # l = n.split(',')
    return l

if __name__ == '__main__':
    import datetime
    import time

    # Year ago?
    show_since = datetime.datetime.now() - datetime.timedelta(365)
    # 10 years ago?
    #show_since = datetime.datetime.now() - datetime.timedelta(10 * 365)

    modname = 'ietf.generate_draft_aliases'
    date = time.strftime("%Y-%m-%d_%H:%M:%S")
    print '# Generated by python -m %s at %s' % (modname, date)

    drafts = Document.objects.all()

    # Drafts with active status
    active_drafts = drafts.filter(states__slug='active')

    # Drafts that expired within year
    inactive_recent_drafts = drafts.exclude(states__slug='active').filter(expires__gte=show_since)

    interesting_drafts = active_drafts | inactive_recent_drafts

    for draft in interesting_drafts.distinct().iterator():
        # Omit RFCs, we care only about drafts
        if draft.docalias_set.filter(name__startswith='rfc'):
            continue
        name = draft.name
        done = []
        all = []
        def handle_sublist(name, f, o, is_ad=False):
            r = dump_sublist(name, f, o, is_ad)
            if r:
                done.append(name)
                all.extend(r)
            return r
        #.authors (/and no suffix) = authors

        # First, do no suffix case
        # If no authors, don't generate list either
        r = dump_sublist(name, get_draft_authors_emails, draft)
        if not r:
            continue
        handle_sublist('%s%s' % (name, '.authors'), get_draft_authors_emails, draft)
        wg = draft.group

        if wg:
            # .chairs = WG chairs
            handle_sublist('%s%s' % (name, '.chairs'), get_group_chairs_emails, wg)

        # .ad = sponsoring AD / WG AD (WG document)
        handle_sublist('%s%s' % (name, '.ad'), get_draft_ad_emails, draft, True)

        # .notify = notify email list from the Document
        handle_sublist('%s%s' % (name, '.notify'), get_draft_notify_emails, draft)

        # .all = everything on 'done' (recursive aliases)
        #dump_sublist('%s%s' % (name, '.all'), None, done)
        # .all = everything on 'all' (expanded aliases)
        dump_sublist('%s%s' % (name, '.all'), None, all)


