# Autogenerated by the mkresources management command 2014-11-13 23:15
from tastypie.resources import ModelResource
from tastypie.fields import ToOneField, ToManyField
from tastypie.constants import ALL, ALL_WITH_RELATIONS

from ietf import api

from ietf.meeting.models import *       # pyflakes:ignore


from ietf.name.resources import MeetingTypeNameResource
class MeetingResource(ModelResource):
    type = ToOneField(MeetingTypeNameResource, 'type')
    agenda = ToOneField('ietf.meeting.resources.ScheduleResource', 'agenda', null=True)
    class Meta:
        queryset = Meeting.objects.all()
        #resource_name = 'meeting'
        filtering = { 
            "id": ALL,
            "number": ALL,
            "date": ALL,
            "city": ALL,
            "country": ALL,
            "time_zone": ALL,
            "venue_name": ALL,
            "venue_addr": ALL,
            "break_area": ALL,
            "reg_area": ALL,
            "agenda_note": ALL,
            "session_request_lock_message": ALL,
            "type": ALL_WITH_RELATIONS,
            "agenda": ALL_WITH_RELATIONS,
        }
api.meeting.register(MeetingResource())

from ietf.name.resources import RoomResourceNameResource
class ResourceAssociationResource(ModelResource):
    name = ToOneField(RoomResourceNameResource, 'name')
    class Meta:
        queryset = ResourceAssociation.objects.all()
        #resource_name = 'resourceassociation'
        filtering = { 
            "id": ALL,
            "icon": ALL,
            "desc": ALL,
            "name": ALL_WITH_RELATIONS,
        }
api.meeting.register(ResourceAssociationResource())

from ietf.group.resources import GroupResource
from ietf.name.resources import ConstraintNameResource
from ietf.person.resources import PersonResource
class ConstraintResource(ModelResource):
    meeting = ToOneField(MeetingResource, 'meeting')
    source = ToOneField(GroupResource, 'source')
    target = ToOneField(GroupResource, 'target', null=True)
    person = ToOneField(PersonResource, 'person', null=True)
    name = ToOneField(ConstraintNameResource, 'name')
    class Meta:
        queryset = Constraint.objects.all()
        #resource_name = 'constraint'
        filtering = { 
            "id": ALL,
            "day": ALL,
            "meeting": ALL_WITH_RELATIONS,
            "source": ALL_WITH_RELATIONS,
            "target": ALL_WITH_RELATIONS,
            "person": ALL_WITH_RELATIONS,
            "name": ALL_WITH_RELATIONS,
        }
api.meeting.register(ConstraintResource())

class RoomResource(ModelResource):
    meeting = ToOneField(MeetingResource, 'meeting')
    resources = ToManyField(ResourceAssociationResource, 'resources', null=True)
    class Meta:
        queryset = Room.objects.all()
        #resource_name = 'room'
        filtering = { 
            "id": ALL,
            "name": ALL,
            "capacity": ALL,
            "meeting": ALL_WITH_RELATIONS,
            "resources": ALL_WITH_RELATIONS,
        }
api.meeting.register(RoomResource())

from ietf.person.resources import PersonResource
class ScheduleResource(ModelResource):
    meeting = ToOneField(MeetingResource, 'meeting', null=True)
    owner = ToOneField(PersonResource, 'owner')
    class Meta:
        queryset = Schedule.objects.all()
        #resource_name = 'schedule'
        filtering = { 
            "id": ALL,
            "name": ALL,
            "visible": ALL,
            "public": ALL,
            "badness": ALL,
            "meeting": ALL_WITH_RELATIONS,
            "owner": ALL_WITH_RELATIONS,
        }
api.meeting.register(ScheduleResource())

from ietf.group.resources import GroupResource
from ietf.doc.resources import DocumentResource
from ietf.name.resources import SessionStatusNameResource
from ietf.person.resources import PersonResource
class SessionResource(ModelResource):
    meeting = ToOneField(MeetingResource, 'meeting')
    group = ToOneField(GroupResource, 'group')
    requested_by = ToOneField(PersonResource, 'requested_by')
    status = ToOneField(SessionStatusNameResource, 'status')
    materials = ToManyField(DocumentResource, 'materials', null=True)
    resources = ToManyField(ResourceAssociationResource, 'resources', null=True)
    requested_duration = api.TimedeltaField()
    class Meta:
        queryset = Session.objects.all()
        #resource_name = 'session'
        filtering = { 
            "id": ALL,
            "name": ALL,
            "short": ALL,
            "attendees": ALL,
            "agenda_note": ALL,
            "requested": ALL,
            "requested_duration": ALL,
            "comments": ALL,
            "scheduled": ALL,
            "modified": ALL,
            "meeting": ALL_WITH_RELATIONS,
            "group": ALL_WITH_RELATIONS,
            "requested_by": ALL_WITH_RELATIONS,
            "status": ALL_WITH_RELATIONS,
            "materials": ALL_WITH_RELATIONS,
            "resources": ALL_WITH_RELATIONS,
        }
api.meeting.register(SessionResource())

from ietf.name.resources import TimeSlotTypeNameResource
class TimeSlotResource(ModelResource):
    meeting = ToOneField(MeetingResource, 'meeting')
    type = ToOneField(TimeSlotTypeNameResource, 'type')
    location = ToOneField(RoomResource, 'location', null=True)
    sessions = ToManyField(SessionResource, 'sessions', null=True)
    duration = TimedeltaField()
    class Meta:
        queryset = TimeSlot.objects.all()
        #resource_name = 'timeslot'
        filtering = { 
            "id": ALL,
            "name": ALL,
            "time": ALL,
            "duration": ALL,
            "show_location": ALL,
            "modified": ALL,
            "meeting": ALL_WITH_RELATIONS,
            "type": ALL_WITH_RELATIONS,
            "location": ALL_WITH_RELATIONS,
            "sessions": ALL_WITH_RELATIONS,
        }
api.meeting.register(TimeSlotResource())

class ScheduledSessionResource(ModelResource):
    timeslot = ToOneField(TimeSlotResource, 'timeslot')
    session = ToOneField(SessionResource, 'session', null=True)
    schedule = ToOneField(ScheduleResource, 'schedule')
    extendedfrom = ToOneField('ietf.meeting.resources.ScheduledSessionResource', 'extendedfrom', null=True)
    class Meta:
        queryset = ScheduledSession.objects.all()
        #resource_name = 'scheduledsession'
        filtering = { 
            "id": ALL,
            "modified": ALL,
            "notes": ALL,
            "badness": ALL,
            "pinned": ALL,
            "timeslot": ALL_WITH_RELATIONS,
            "session": ALL_WITH_RELATIONS,
            "schedule": ALL_WITH_RELATIONS,
            "extendedfrom": ALL_WITH_RELATIONS,
        }
api.meeting.register(ScheduledSessionResource())

