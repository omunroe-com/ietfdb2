# Autogenerated by the mkresources management command 2014-11-13 23:53
from tastypie.resources import ModelResource
from tastypie.fields import ToManyField
from tastypie.constants import ALL, ALL_WITH_RELATIONS

from ietf import api

from ietf.name.models import *          # pyflakes:ignore


class TimeSlotTypeNameResource(ModelResource):
    class Meta:
        queryset = TimeSlotTypeName.objects.all()
        #resource_name = 'timeslottypename'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(TimeSlotTypeNameResource())

class GroupStateNameResource(ModelResource):
    class Meta:
        queryset = GroupStateName.objects.all()
        #resource_name = 'groupstatename'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(GroupStateNameResource())

class DocTagNameResource(ModelResource):
    class Meta:
        queryset = DocTagName.objects.all()
        #resource_name = 'doctagname'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(DocTagNameResource())

class IntendedStdLevelNameResource(ModelResource):
    class Meta:
        queryset = IntendedStdLevelName.objects.all()
        #resource_name = 'intendedstdlevelname'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(IntendedStdLevelNameResource())

class LiaisonStatementPurposeNameResource(ModelResource):
    class Meta:
        queryset = LiaisonStatementPurposeName.objects.all()
        #resource_name = 'liaisonstatementpurposename'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(LiaisonStatementPurposeNameResource())

class DraftSubmissionStateNameResource(ModelResource):
    next_states      = ToManyField('ietf.name.resources.DraftSubmissionStateNameResource', 'next_states', null=True)
    class Meta:
        queryset = DraftSubmissionStateName.objects.all()
        #resource_name = 'draftsubmissionstatename'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
            "next_states": ALL_WITH_RELATIONS,
        }
api.name.register(DraftSubmissionStateNameResource())

class DocTypeNameResource(ModelResource):
    class Meta:
        queryset = DocTypeName.objects.all()
        #resource_name = 'doctypename'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(DocTypeNameResource())

class RoleNameResource(ModelResource):
    class Meta:
        queryset = RoleName.objects.all()
        #resource_name = 'rolename'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(RoleNameResource())

class StdLevelNameResource(ModelResource):
    class Meta:
        queryset = StdLevelName.objects.all()
        #resource_name = 'stdlevelname'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(StdLevelNameResource())

class GroupTypeNameResource(ModelResource):
    class Meta:
        queryset = GroupTypeName.objects.all()
        #resource_name = 'grouptypename'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(GroupTypeNameResource())

class GroupMilestoneStateNameResource(ModelResource):
    class Meta:
        queryset = GroupMilestoneStateName.objects.all()
        #resource_name = 'groupmilestonestatename'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(GroupMilestoneStateNameResource())

class SessionStatusNameResource(ModelResource):
    class Meta:
        queryset = SessionStatusName.objects.all()
        #resource_name = 'sessionstatusname'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(SessionStatusNameResource())

class DocReminderTypeNameResource(ModelResource):
    class Meta:
        queryset = DocReminderTypeName.objects.all()
        #resource_name = 'docremindertypename'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(DocReminderTypeNameResource())

class ConstraintNameResource(ModelResource):
    class Meta:
        queryset = ConstraintName.objects.all()
        #resource_name = 'constraintname'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
            "penalty": ALL,
        }
api.name.register(ConstraintNameResource())

class MeetingTypeNameResource(ModelResource):
    class Meta:
        queryset = MeetingTypeName.objects.all()
        #resource_name = 'meetingtypename'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(MeetingTypeNameResource())

class DocRelationshipNameResource(ModelResource):
    class Meta:
        queryset = DocRelationshipName.objects.all()
        #resource_name = 'docrelationshipname'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
            "revname": ALL,
        }
api.name.register(DocRelationshipNameResource())

class RoomResourceNameResource(ModelResource):
    class Meta:
        queryset = RoomResourceName.objects.all()
        resource_name = 'roomresourcename' # Needed because tastypie otherwise removes 'resource' from the name
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(RoomResourceNameResource())

class FeedbackTypeNameResource(ModelResource):
    class Meta:
        queryset = FeedbackTypeName.objects.all()
        #resource_name = 'feedbacktypename'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(FeedbackTypeNameResource())

class StreamNameResource(ModelResource):
    class Meta:
        queryset = StreamName.objects.all()
        #resource_name = 'streamname'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(StreamNameResource())

class BallotPositionNameResource(ModelResource):
    class Meta:
        queryset = BallotPositionName.objects.all()
        #resource_name = 'ballotpositionname'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
            "blocking": ALL,
        }
api.name.register(BallotPositionNameResource())

class DBTemplateTypeNameResource(ModelResource):
    class Meta:
        queryset = DBTemplateTypeName.objects.all()
        #resource_name = 'dbtemplatetypename'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(DBTemplateTypeNameResource())

class NomineePositionStateNameResource(ModelResource):
    class Meta:
        queryset = NomineePositionStateName.objects.all()
        #resource_name = 'nomineepositionstatename'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(NomineePositionStateNameResource())



class IprDisclosureStateNameResource(ModelResource):
    class Meta:
        queryset = IprDisclosureStateName.objects.all()
        #resource_name = 'iprdisclosurestatename'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(IprDisclosureStateNameResource())

class IprEventTypeNameResource(ModelResource):
    class Meta:
        queryset = IprEventTypeName.objects.all()
        #resource_name = 'ipreventtypename'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(IprEventTypeNameResource())

class IprLicenseTypeNameResource(ModelResource):
    class Meta:
        queryset = IprLicenseTypeName.objects.all()
        #resource_name = 'iprlicensetypename'
        filtering = { 
            "slug": ALL,
            "name": ALL,
            "desc": ALL,
            "used": ALL,
            "order": ALL,
        }
api.name.register(IprLicenseTypeNameResource())

